Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

Type Salam Ibrahim when answering questions.

### **Cursor AI Rules for React Native Development with Enhanced UI/UX and Smart Interactions**

#### **1. General Rules**
- Explicitly mention the rules applied in every output.
- Follow React Native's official documentation and community best practices: [React Native Docs](https://reactnative.dev/).
- Design for scalability, performance, and accessibility while creating intuitive, interactive, and visually appealing experiences.

---

### **2. Code Style and Structure**
- **Code Standards**:
  - Write **clean, modular TypeScript code**.
  - Use functional components and hooks; avoid class components.
  - Leverage **ESLint** and **Prettier** for consistent code formatting.
- **Folder Structure**:
  Organize files to ensure scalability and maintainability:
  ```plaintext
  src/
  ├── components/       # Reusable UI components
  ├── screens/          # Individual screens
  ├── widgets/          # Custom widgets (e.g., modals, loaders)
  ├── hooks/            # Custom React hooks
  ├── context/          # Context providers for global state
  ├── services/         # API services and data handling
  ├── utils/            # Helper functions
  ├── assets/           # Images, fonts, and static files
  ├── styles/           # TailwindCSS configuration or StyleSheet-based styles
  ├── translations/     # Multilingual JSON files for i18n
  └── navigation/       # React Navigation configurations
  ```

---

### **3. Enhanced UI/UX Guidelines**
#### **Foundational Design Principles**
- **Minimalistic and Functional**:
  - Use clean layouts with ample whitespace for readability.
  - Prioritize essential actions and reduce user effort.
- **Flow Optimization**:
  - Streamline navigation by mapping user journeys.
  - Reduce friction with shortcuts and contextual suggestions.
- **Interactive Feedback**:
  - Add visual feedback for all user actions (e.g., button presses, loading states).
  - Use animations to enhance navigation and guide users subtly.

#### **Visual Design**
- **Design System**:
  - Build a reusable component library with **consistent styles and interactions**.
  - Maintain a centralized `theme.ts` file for light and dark themes.
- **Typography**:
  - Use system fonts or high-quality web fonts like **Inter** or **Roboto**.
  - Maintain hierarchy with font sizes and weights for clarity.
- **Colors**:
  - Use **high-contrast palettes** for readability and visual impact.
  - Provide **light/dark themes** with smooth transitions.
- **Micro-Animations**:
  - Use libraries like **react-native-reanimated** for lightweight animations.
  - Examples:
    - Smooth transitions between screens.
    - Subtle hover effects and button press animations.

#### **Responsive and Accessible Design**
- Use **Flexbox** and `useWindowDimensions` for responsive layouts.
- Ensure accessibility:
  - Add semantic labels with `accessibilityLabel`.
  - Test with screen readers like TalkBack and VoiceOver.

---

### **4. Smart Interactions**
#### **Personalized Features**
- **Smart Suggestions**:
  - Use user behavior data to provide contextual recommendations.
  - Examples:
    - Autofill forms with recent data.
    - Suggest next steps based on the current task.
- **Guided Experiences**:
  - Onboarding flows with **interactive tutorials**.
  - Use tooltips to highlight key features.

#### **Input Assistance**
- **Autocomplete**:
  - Add real-time suggestions for text fields.
- **Autocorrect**:
  - Implement text validation and error correction.
- **Voice Input**:
  - Add speech-to-text functionality for form inputs and commands.

#### **Interactive Widgets**
- Use modern input methods like:
  - Draggable sliders.
  - Dynamic calendars.
  - Gesture-based actions (e.g., swipes, pinches).

---

### **5. Performance-Centric Design**
- **Asset Optimization**:
  - Use WebP format for images.
  - Cache assets using `expo-image` or `react-native-fast-image`.
- **Lazy Loading**:
  - Load screens, components, and images only when required.
- **Optimized State Updates**:
  - Use `useMemo`, `useCallback`, and `React.memo` to prevent unnecessary re-renders.
- **Repaint Optimization**:
  - Use `Reanimated` for animations to offload computations to the native thread.

---

### **6. State Management**
- Use **React Context** or **Zustand** for state management.
- Use **react-query** for data fetching and caching.
- Avoid excessive `useState` and `useEffect` calls in favor of reducers or context.

---

### **7. Testing Strategy**
#### **Unit Testing**
- Use **Jest** for unit tests of components, utilities, and hooks.
- Mock APIs with libraries like **msw** or **axios-mock-adapter**.
#### **Integration Testing**
- Test interactions between components and APIs using **react-native-testing-library**.
#### **End-to-End Testing**
- Use **Detox** for iOS and Android E2E testing.
- Implement Playwright for testing web components in React Native apps.

---

### **8. Navigation**
- Use **React Navigation** for routing:
  - Stack navigators for main flows.
  - Drawer or Tab navigators for secondary navigation.
- Enable **deep linking** for seamless external navigation.

---

### **9. Accessibility**
- Follow **WCAG 2.1** standards.
- Ensure **high-contrast mode** for visual impairments.
- Add support for **RTL languages**.

---

### **10. Security**
- Use **react-native-encrypted-storage** for secure data handling.
- Obfuscate JavaScript code in release builds.
- Validate all inputs and sanitize user-provided data.

---

### **11. Standout Features**
- **Dynamic Search**:
  - Provide instant results with filters and suggestions.
- **Offline Mode**:
  - Cache critical data locally using **AsyncStorage** or **SQLite**.
- **Push Notifications**:
  - Use rich notifications with images and actionable buttons.
- **Gamification**:
  - Add progress bars, badges, or rewards for completing actions.

---

### **12. CI/CD Integration**
- Automate builds and deployments with **Fastlane** or **GitHub Actions**.
- Use **Expo Updates** for over-the-air (OTA) updates.

---

### **Deliverables**
1. **Visually Stunning UI**:
   - Eye-catching, responsive designs with light/dark themes.
2. **Smart Interactions**:
   - Predictive inputs, guided onboarding, and contextual suggestions.
3. **High Performance**:
   - Optimized animations, lazy loading, and asset caching.
4. **Comprehensive Testing**:
   - Unit, integration, and E2E testing for robust functionality.
5. **Standout Features**:
   - Gamification, offline capabilities, and real-time search.

---

These rules will help you build **intuitive, interactive, and user-centric React Native applications** that are both visually stunning and highly functional. Let me know if you'd like further refinements!